<script>
    // ##############  HINT REVEAL SHORTCUTS  ##############
    // All shortcuts will also open with "H" if using the Hint Hotkeys add-on 
    var ButtonShortcuts = {
        "Lecture Notes" : "Alt + 1",
        "Missed Questions" : "Alt + 2",
        "Pathoma" : "Alt + 3",
        "Boards and Beyond" : "Alt + 4",
        "First Aid" : "Alt + 5",
        "Sketchy" : "Alt + 6",
        "Pixorize" : "Alt + 7",
        "Physeo" : "Alt + 8",
        "OME" : "Alt + F1",
        "Additional Resources" : 'Alt + 9',
    }
    var ToggleAllButtonsShortcut = "'"

    // ##############  SHOW HINTS AUTOMATICALLY  ##############
    var ButtonAutoReveal = {
        "Lecture Notes" : false,
        "Missed Questions" : false,
        "Pathoma" : false,
        "Boards and Beyond" : false,
        "First Aid" : false,
        "Sketchy" : false,
        "Pixorize" : false,
        "Physeo" : false,
        "OME" : false, // not currently a button
        "Additional Resources" : false,
    }

    var ScrollToButton = true;

    //ENTER THE TAG TERM WHICH, WHEN PRESENT, WILL TRIGGER A RED BACKGROUND
    var tagID = "XXXYYYZZZ"

    // ~~~~~~~~~~~~~  CLOZE ONE BY ONE  ~~~~~~~~~~~~~
    var revealClozeShortcut = "N" // Shortcut to reveal next cloze
    var revealClozeWordShortcut = "Shift + N" // Shortcut to reveal next hidden word in cloze

    // Changes how "Reveal Next" and clicking behaves. Either "cloze" or "word".
    // "word" reveals word by word. 
    var revealNextClozeMode = "cloze" 

    // What cloze is hidden with
    var clozeHider = (elem) => "ðŸ‘‘"
    /* 
    You can replace the above line with below examples. 'â–ˆ' or '_' works well for hiding clozes.

    // Fixed length:
    var clozeHider = (elem) => "â–ˆâ–ˆâ–ˆ"
    // Replace each character with "â–ˆ":
    var clozeHider = (elem) => "â–ˆ".repeat(elem.textContent.length)
    // Show whitespaces:
    var clozeHider = (elem) => "[" + elem.textContent.split(" ").map((t) => "â–ˆ".repeat(t.length)).join(" ") + "]"
    // Color-filled box (doesn't hide images):
    var clozeHider = (elem) => `<span style="background-color: red; color: transparent;">${elem.innerHTML}</span>`
    */

</script>


<div class="clozefield" id="text">{{cloze:Text}}</div>

<!-- ##############  EDIT CLOZE DURING REVIEW  ##############
			-change below (not above) to  "edit:cloze:Text" for editable field, 
				but be sure to have the correct add-on installed-->

<div class="editcloze" id="text">{{edit:cloze:Text}}</div>


<br>

<!-- ##############  TEXT-TO-SPEECH ##############
replace the arrows/dashes from the statement below with double curly brackets-->

<!--tts en_US voices=Apple_Samantha speed=1.4:cloze-only:Text-->


<hr>

<!-- ClOZE ONE BY ONE BUTTONS -->
{{#One by one}}
<button id="button-reveal-next" class="button-general" onclick="revealNextCloze()">Reveal Next Cloze</button>
<button id="button-toggle-all" class="button-general" onclick="toggleAllCloze()">Toggle All Cloze</button>
<br />
{{/One by one}}

<!-- OME AUTO OPEN FIELD -->
<div class="banner-ome">{{#OME}}{{OME}}{{/OME}}</div>

<!-- BUTTON FIELDS -->
{{#Lecture Notes}}<hint-button field-name="Lecture Notes" short="ln" hint-id="notes"></hint-button>
<div id="dummy-ln" style="display: none;">{{edit:Lecture Notes}}</div>{{/Lecture Notes}}

{{#Missed Questions}}<hint-button field-name="Missed Questions" short="mq" hint-id="missed"></hint-button>
<div id="dummy-mq" style="display: none;">{{edit:Missed Questions}}</div>{{/Missed Questions}}

{{#Pathoma}}<hint-button field-name="Pathoma" short="pat" hint-id="pathoma" icon="_pathoma.icon.png" no-text></hint-button>
<div id="dummy-pat" style="display: none;">{{edit:Pathoma}}</div>{{/Pathoma}}

{{#Boards and Beyond}}<hint-button field-name="Boards and Beyond" short="bb" hint-id="bnb" icon="_b&b.icon.png"></hint-button>
<div id="dummy-bb" style="display: none;">{{edit:Boards and Beyond}}</div>{{/Boards and Beyond}}

<!-- Extra field -->
<p></p>{{#Extra}}
<div id="extra">{{edit:Extra}}</div>
{{/Extra}}<br>

{{#First Aid}}<hint-button field-name="First Aid" short="fa" hint-id="firstaid" icon="_first-aid.icon_v2.1.png"></hint-button>
<div id="dummy-fa" style="display: none;">{{edit:First Aid}}</div>{{/First Aid}}

{{#Sketchy}}<hint-button field-name="Sketchy" short="sketchy" hint-id="sketchy" icon="_sketchy.icon.png"></hint-button>
<div id="dummy-sketchy" style="display: none;">{{edit:Sketchy}}</div>{{/Sketchy}}

{{#Pixorize}}<hint-button field-name="Pixorize" short="pixorize" hint-id="pixorize" icon="_pixorize.png"></hint-button>
<div id="dummy-pixorize" style="display: none;">{{edit:Pixorize}}</div>{{/Pixorize}}

{{#Physeo}}<hint-button field-name="Physeo" short="physeo" hint-id="physeo" icon="_physeologo.icon.png" no-text></hint-button>
<div id="dummy-physeo" style="display: none;">{{edit:Physeo}}</div>{{/Physeo}}

<!-- OME FIELD (DISABLED BY DEFAULT) 
{{#OME}}<hint-button field-name="OME" short="ome" hint-id="ome"></hint-button>
<div id="dummy-ome" style="display: none;">{{edit:OME}}</div>{{/OME}}
-->

{{#Additional Resources}}<hint-button field-name="Additional Resources" short="ar" hint-id="additional"></hint-button>
<div id="dummy-ar" style="display: none;">{{edit:Additional Resources}}</div>{{/Additional Resources}}


<!-- ANKING HYPERLINK IMAGE -->
<a href="https://www.ankingmed.com"><img src="_AnKingRound.png" alt="The AnKing" id="pic"></a>

<%- include('src/components/ankingAddEventListener.ejs') %>

<%- include('src/components/shortcutMatcher.ejs') %>

<%- include('src/components/toggleButtons.ejs', {defaultIconFile: "_Anking_v3.png"}) %>


<!-- CLOZE ONE BY ONE SCRIPT -->
<style>
  .cloze[data-content]:hover {
    cursor: pointer;
  }
</style>

<script>
  (function() {
    var clozeOneByOneEnabled = true;
    try {
        clozeOneByOneEnabled = `{{One by one}}`.trim() !== ""
    } catch (exception) {
      console.log(exception)
    }

    const hideCloze = function(cloze) {
      if (!clozeOneByOneEnabled) {
        return
      }
      cloze.dataset.content = cloze.innerHTML
        if(window.clozeHints && window.clozeHints[i]) {
            cloze.innerHTML = window.clozeHints[i]
        } else {
            cloze.innerHTML = clozeHider(cloze)
        }
    }
    
    const revealCloze = function(elem) {
      // Checking for dataset.content is undefined may not be needed anymore?
      if (!clozeOneByOneEnabled || elem.dataset.content === undefined) {
        return
      }
      elem.innerHTML = elem.dataset.content
      delete elem.dataset.content
    }

    const revealClozeWord = function(elem) {
      if (!clozeOneByOneEnabled || elem.dataset.content === undefined) {
        return
      }
      if (elem.dataset.hidden !== undefined) {
        let words = elem.dataset.hidden.split(" ");
        if (words.length == 1) {
          revealCloze(elem)
          delete elem.dataset.hidden
          delete elem.dataset.revealed
        } else {
          elem.dataset.revealed = elem.dataset.revealed + " " + words[0]
          elem.dataset.hidden = words.slice(1).join(" ");
          let temp = document.createElement("div");
          temp.innerHTML = elem.dataset.hidden;
          elem.innerHTML = elem.dataset.revealed + " " + clozeHider(temp);
        }
      } else {
        let temp = document.createElement("div");
        temp.innerHTML = elem.dataset.content;
        elem.dataset.hidden = temp.textContent;
        elem.dataset.revealed = "";
        revealClozeWord(elem)
      }
    }

    window.revealNextCloze = function() {
      let nextHidden = document.querySelector(".cloze[data-content]")
      if(!nextHidden) {
          return
      } 
      if (revealNextClozeMode === "word") {
          revealClozeWord(nextHidden)
      } else {
          revealCloze(nextHidden)
      }
    }

    const hideAllCloze = function(initial) {
      let clozes = document.getElementsByClassName("cloze")
      for (let i = 0; i < clozes.length; i++) {
        let cloze = clozes[i]
        if (cloze.offsetWidth === 0) {
          continue
        }
        hideCloze(cloze)
        if (initial === true) {
          ankingAddEventListener(cloze, "touchend", revealClozeClicked)
          ankingAddEventListener(cloze, "click", revealClozeClicked)
        }
      }
    }

    window.toggleAllCloze = function() {
      let elems = document.querySelectorAll(".cloze[data-content]")
      let button = document.getElementById("button-toggle-all")
      if(elems.length > 0) {
        for (let i = 0; i < elems.length; i++) {
            revealCloze(elems[i])
        }
      } else {
        hideAllCloze(initial=false)
      }
    }

    const revealClozeClicked = function(ev) {
      let elem = ev.currentTarget
      if (elem.dataset.content === undefined) {
        return
      }
      if (!ev.altKey && (revealNextClozeMode !== "word")) {
        revealCloze(elem)
      } else {
        revealClozeWord(elem)
      }
      ev.stopPropagation()
      ev.preventDefault()
    }

    // previously attached listener should be removed.
    //
    // In case the keydown listener changes between versions across notetypes
    // and if shortcut is different across notetypes, attached every time.
    const attachKeydownListener = function() {
      if(window.revealClozeKeydownListener) {
        document.removeEventListener("keydown", window.revealClozeKeydownListener)
      }
      let showAllShortcut = shortcutMatcher(window.revealClozeShortcut)
      let showWordShortcut = shortcutMatcher(window.revealClozeWordShortcut)

      window.revealClozeKeydownListener = function(ev) {
        if(showAllShortcut(ev)) {
          let elem = document.querySelector(".cloze[data-content]")
          if (elem) {
            revealCloze(elem)
            ev.stopPropagation()
            ev.preventDefault()
            return
          }
        }
        if (showWordShortcut(ev)) {
          let elem = document.querySelector(".cloze[data-content]")
          if (elem) {
            revealClozeWord(elem)
            ev.stopPropagation()
            ev.preventDefault()
            return
          }
        }
      }
      ankingAddEventListener(document, "keydown", window.revealClozeKeydownListener);
    }
    
    // autoflip hides card in front template
    document.getElementById("qa").style.removeProperty("display")
    hideAllCloze(initial=true)

    attachKeydownListener()
  })()
</script>


<!-- CLICKABLE COLORFUL TAGS -->
{{#Tags}}
<div id="tags-container">{{clickable::Tags}}</div>
<script>
    var tagContainer = document.getElementById("tags-container")
    if (tagContainer.childElementCount == 0) {
        var tagList = tagContainer.innerHTML.split(" ");
        var kbdList = [];
        var newTagContent = document.createElement("div");

        for (var i = 0; i < tagList.length; i++) {
            var newTag = document.createElement("kbd");
            newTag.innerHTML = tagList[i];
            newTagContent.append(newTag)
        }
        tagContainer.innerHTML = newTagContent.innerHTML;
        tagContainer.style.cursor = "default";
    }
    if (tagContainer.innerHTML.indexOf(tagID) != -1) {
        tagContainer.style.backgroundColor = "rgba(251,11,11,.15)";
    }

    function showtags() {
        var tagContainerShortcut = document.getElementById("tags-container");

        if (tagContainerShortcut.style.display
            === "none") {
            tagContainerShortcut.style.display = "block";
        } else {
            tagContainerShortcut.style.display =
                "none";
        }
    }
    var isShortcut = shortcutMatcher(toggleTagsShortcut)
    ankingAddEventListener(document, 'keyup', function (e) {
        if (isShortcut(e)) {
          console.log("showTags")
            showtags();
        }
    });

</script>
{{/Tags}}

<%- include('src/components/wikipediaSearches.ejs') %>