<%#

# Components
components/ankingAddEventListener
components/shortcutMatcher
components/hintButton

# Global Variables
- ButtonShortcuts: Object[Shortcut string]
- ToggleAllButtonsShortcut: Shortcut string
- ButtonAutoReveal: Object[boolean]
- ScrollToButton: boolean

_%>
<!-- HINT BUTTONS SETUP -->
<script>
    (function() {
      window.toggleHintBtn = function(containerId, noScrolling=false) {
        const container = document.getElementById(containerId)
        const link = container.getElementsByTagName("a")[0]
        const button = container.getElementsByTagName("button")[0]
        const hint = container.getElementsByTagName("div")[0]
    
        if (hint.style.display == "none") {
          button.classList.add("expanded-button")
          hint.style.display = "block"
          link.style.display = "none"
          if (ScrollToButton && !noScrolling) {
            hint.scrollIntoView({
              behavior: "smooth", // "auto" for instant scrolling
              block: "start",
              inline: "nearest"
            });
          }
        } else {
          button.classList.remove("expanded-button")
          hint.style.display = "none"
          link.style.display = ""
        }
      }
    
      const setupHintBtn = function(elem) {
        const containerId = elem.id
        const fieldName = elem.dataset.name
        const button = elem.getElementsByClassName("button")[0]
        
        if (ButtonAutoReveal[fieldName]) {
          toggleHintBtn(containerId, noScrolling=true)
        }
    
        const isShortcut = shortcutMatcher(ButtonShortcuts[fieldName])
        const isToggleAllShortcut = shortcutMatcher(ToggleAllButtonsShortcut)
        ankingAddEventListener("keydown", (evt) => {
          if (evt.repeat) return
          if (isShortcut(evt) || isToggleAllShortcut(evt)) {
            toggleHintBtn(containerId)
          }
        })
      }
    
      const hints = document.getElementsByClassName("hintBtn")
      for (let i = 0; i < hints.length; i++) {
        setupHintBtn(hints[i])
      }
    })()
    </script>