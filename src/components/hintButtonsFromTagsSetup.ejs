<script>
    (function () {
        function tagToResourceTitleAndSlug(tag, resourceSlug) {
            try {
                // Extract step number
                const stepMatch = tag.match(/#AK_Step(\d+)_v12::/i);
                if (!stepMatch) return null;
                const step = parseInt(stepMatch[1]);

                // Extract resource type
                const resourceTypeMatch = tag.match(/_v12::#(.+?)::/i);
                if (!resourceTypeMatch) return null;
                const resourceTypeStr = resourceTypeMatch[1];

                // Process path
                let path = tag.replace(/.+_v12::#.+?::/i, '');
                let pathParts = path.split('::');
                pathParts = pathParts.map(part => part.toLowerCase());

                // Clean path parts (remove number prefixes)
                const cleanedPathParts = pathParts.map(part => part.replace(/\d+_/g, ''));

                // Create slug and title
                const slug = `step${step}-${resourceSlug}-${cleanedPathParts.join('-')}`;
                const title = cleanedPathParts[cleanedPathParts.length - 1]
                    .replace(/_/g, ' ')
                    .split(' ')
                    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
                    .join(' ');

                return { title, slug };
            } catch (error) {
                return null;
            }
        }

        function createResourceUrl(slug) {
            return `https://app.ankihub.net/integrations/mcgraw-hill/preview/${slug}`;
        }

        function getResourceTags(tags, resourceTypeTagPart) {
            const searchPattern = `v12::${resourceTypeTagPart}`.toLowerCase();
            return tags.filter(tag => tag.toLowerCase().includes(searchPattern));
        }

        function setupHintButtonFromTags(hintButton) {
            const resourceTags = getResourceTags(tags, hintButton.dataset.resourceTypeTagPart);

            if (resourceTags && resourceTags.length > 0) {
                const button = document.getElementById(hintButton.id);
                const hintsDiv = button.querySelector('.hints');

                button.style.display = "block";

                // Process tags and create links
                const processedResources = resourceTags
                    .map(tag => {
                        const resource = tagToResourceTitleAndSlug(tag, hintButton.dataset.resourceSlug);
                        if (resource) {
                            const url = createResourceUrl(resource.slug);
                            return `<a href="${url}" target="_blank">${hintButton.dataset.linkPrefix}${resource.title}</a>`;
                        }
                        return null;
                    })
                    .filter(link => link !== null);

                hintsDiv.innerHTML = processedResources.join('<br>');
            }

        }

        const tags = `{{Tags}}`.split(" ");

        const hintButtonsFromTags = document.querySelectorAll(".hintBtn.hintBtnFromTags");
        for (let i = 0; i < hintButtonsFromTags.length; i++) {
            setupHintButtonFromTags(hintButtonsFromTags[i])
        }
    })()
</script>