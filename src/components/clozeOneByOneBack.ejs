<%# 

# Parameters
- optional: boolean
If true, only cloze-one-by-one mode if {{One by one}} field is not empty. 

# Components
components/clozeOneByOneButtons
components/ankingAddEventListener
components/shortcutMatcher

# Global Variables
- revealClozeShortcut: shortcut string
- revealClozeWordShortcut: shortcut string
- clozeHider: (elem) -> string
- clozeHints?: Array[string]

# Notes
- Removes `#qa` element `display` property.
- Exposes `toggleAllCloze` and `revealNextCloze` function

_%>
<%- include('src/components/autoflipBack.ejs') %>

<!-- CLOZE ONE BY ONE SCRIPT -->
<style>
  .cloze[data-content]:hover {
    cursor: pointer;
  }
  .cloze[data-hint] {
    color: #009400 !important;
  }
</style>

<script>
  (function() {
    var clozeOneByOneEnabled = true;
    <%_ if (optional === true) { _%>
      clozeOneByOneEnabled = document.getElementById("one-by-one").textContent !== "";
    <%_ } _%>

    if (!clozeOneByOneEnabled) {
      return
    }
    
    const revealCloze = function(elem) {
      // Checking for dataset.content is undefined may not be needed anymore?
      if (elem.dataset.content === undefined) {
        return
      }
      elem.innerHTML = elem.dataset.content
      rerunMathJax()

      delete elem.dataset.content
      delete elem.dataset.hint
    }

    const revealClozeWord = function(elem) {
      if (elem.dataset.content === undefined) {
        return
      }
      if (elem.dataset.hidden !== undefined) {
        let words = elem.dataset.hidden.split(" ");
        if (words.length == 1) {
          revealCloze(elem)
          delete elem.dataset.hidden
          delete elem.dataset.revealed
        } else {
          elem.dataset.revealed = elem.dataset.revealed + " " + words[0]
          elem.dataset.hidden = words.slice(1).join(" ");
          let temp = document.createElement("div");
          temp.innerHTML = elem.dataset.hidden;
          elem.innerHTML = elem.dataset.revealed + " " + clozeHider(temp);
          delete elem.dataset.hint
        }
      } else {
        let temp = document.createElement("div");
        temp.innerHTML = elem.dataset.content;
        elem.dataset.hidden = temp.textContent;
        elem.dataset.revealed = "";
        revealClozeWord(elem)
      }
      rerunMathJax()
    }

    window.revealNextCloze = function() {
      let nextHidden = document.querySelector(".cloze[data-content]")
      if(!nextHidden) {
          return
      } 
      if (revealNextClozeMode === "word") {
          revealClozeWord(nextHidden)
      } else {
          revealCloze(nextHidden)
      }
    }

    const hideAllCloze = function(initial) {
      let clozes = document.getElementsByClassName("cloze")
      let count = 0 // hidden cloze count
      for (let i = 0; i < clozes.length; i++) {
        let cloze = clozes[i]
        if (cloze.offsetWidth === 0) {
          continue
        }
        cloze.dataset.content = cloze.innerHTML
        if(window.clozeHints && window.clozeHints[count]) {
          cloze.innerHTML = window.clozeHints[count]
          cloze.dataset.hint = true
        } else {
          cloze.innerHTML = clozeHider(cloze)
        }
        count += 1
        if (initial === true) {
          cloze.addEventListener("touchend", revealClozeClicked)
          cloze.addEventListener("click", revealClozeClicked)
        }
      }
    }

    window.toggleAllCloze = function() {
      let elems = document.querySelectorAll(".cloze[data-content]")
      let button = document.getElementById("button-toggle-all")
      if(elems.length > 0) {
        for (let i = 0; i < elems.length; i++) {
            revealCloze(elems[i])
        }
      } else {
        hideAllCloze(initial=false)
      }
    }

    const revealClozeClicked = function(ev) {
      let elem = ev.currentTarget
      if (elem.dataset.content === undefined) {
        return
      }
      if (!ev.altKey && (revealNextClozeMode !== "word")) {
        revealCloze(elem)
      } else {
        revealClozeWord(elem)
      }
      ev.stopPropagation()
      ev.preventDefault()
    }      

    const rerunMathJax = function() {
      // rerun mathjax on the document so that the cloze text gets formatted
      // ... for MathJax 2
      try {
          MathJax.Hub.Queue(["Typeset", MathJax.Hub]);
      } catch {}
      // ... for MathJax 3     
      try {
          MathJax.typesetPromise()
      } catch {}
    }
    
    hideAllCloze(initial=true)

    let isShowNextShortcut = shortcutMatcher(window.revealNextShortcut)
    let isShowWordShortcut = shortcutMatcher(window.revealNextWordShortcut)
    let isToggleAllShortcut = shortcutMatcher(window.toggleAllShortcut)
    ankingAddEventListener("keydown", (ev) => {
      let next = isShowNextShortcut(ev)
      let word = isShowWordShortcut(ev)
      let all = isToggleAllShortcut(ev)
      if (next || word) {
        let elem = document.querySelector(".cloze[data-content]")
        if (elem) {
          if (next) {
            revealCloze(elem)
          } else {
            revealClozeWord(elem)
          }
          ev.stopPropagation()
          ev.preventDefault()
        }
      } else if (all) {
        toggleAllCloze()
        ev.stopPropagation()
        ev.preventDefault()
      }
    });
  })()
</script>