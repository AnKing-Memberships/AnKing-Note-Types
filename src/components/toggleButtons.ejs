<%#

# Parameters
- defaultIconFile: string ("_Anking_v3.png" or "_PhyseoRoundSmall.png" )

# Components
components/ankingAddEventListener
components/shortcutMatcher

# Global Variables
- ButtonShortcuts: Object[Shortcut string]
- ToggleAllButtonsShortcut: Shortcut string
- ButtonAutoReveal: Object[boolean]
- ScrollToButton: boolean

_%>

<!-- No idea why, but some script tags are run twice 
    when Edit Field During Review (Cloze) add-on is on.
    For each hint-button tag, one script tag is run again
    starting from TOGGLE BUTTONS script and working its way upwards.
    
    So we put a lot of empty script tags that will be run twice
    to prevent the above scripts from being run twice.  -->
<script></script><script></script><script></script><script></script><script></script>
<script></script><script></script><script></script><script></script><script></script>
<script></script><script></script><script></script><script></script><script></script>
<script></script><script></script><script></script><script></script><script></script>

<!-- TOGGLE BUTTONS -->
<script>
  function defineHintButton() {
    class HintButton extends HTMLElement {
      constructor() {
        super();
        
        var fieldName = this.getAttribute("field-name")
        
        // adding the strings together this way to prevent Anki from thinking that a field should be inserted here
        var fieldString = '{' + '{' + fieldName + '}}'
        var short = this.getAttribute("short")
        var hintId = this.getAttribute("hint-id")
        var iconFile = this.getAttribute("icon") || "<%- defaultIconFile  %>"
        var buttonText = fieldName
        if (this.hasAttribute("no-text")) buttonText = ""
        this.innerHTML = `
        <a id="link-${short}" href="#" class="hint"></a>
        <button id="button-${short}" class="button-general">
          <img id="icon-${short}" src="">
          ${buttonText}
        </button>
        <div id="${hintId}" class="hints" style="display:none;">
        </div>
        `
        this.button = document.getElementById(`button-${short}`)
        this.link = document.getElementById(`link-${short}`)
        this.hint = document.getElementById(hintId)
        this.icon = document.getElementById(`icon-${short}`)
        
        // inserting the icon file name directly in the template string doesnt work
        // because Anki probably replaces img src attributes using a regex with the url-encoded src
        this.icon.setAttribute("src", iconFile)
        
        // moves the field content from the dummy to this
        var dummy = document.getElementById(`dummy-${short}`)
        var content = dummy.innerHTML
        
        // hide this if the field is empty
        if (dummy.innerHTML == "" ||
        (dummy.lastChild.nodeName == "SCRIPT" && dummy.firstChild.getAttribute("contenteditable") && dummy.firstChild.innerHTML == "")) {
          this.remove()
          return
        }
        
        // this also runs script tags, this makes it compatible with the Edit Field during Review add-on
        ankingsetInnerHTML(this.hint, content)
        
        this.button.onclick = () => this.toggle()
        
        // the link is needed so that this works with the Hint Hotkey add-on
        this.link.onclick = () => this.toggle()
        
        if (ButtonAutoReveal[fieldName]) {
          this.toggle()
        }
        
        var isShortcut = shortcutMatcher(ButtonShortcuts[fieldName])
        var isToggleAllShortcut = shortcutMatcher(ToggleAllButtonsShortcut)
        ankingAddEventListener("keydown", (evt) => {
          if (evt.repeat) return
          if (isShortcut(evt) || isToggleAllShortcut(evt)) {
            this.toggle()
          }
          return false
        })
      }
      
      toggle() {
        if (!this.button) return
        if (this.hint.style.display == "none") {
          this.button.classList.add("expanded-button")
          this.hint.style.display = "block"
          this.link.style.display = "none"
          if (ScrollToButton) {
            this.hint.scrollIntoView({
              behavior: "smooth", // "auto" for instant scrolling
              block: "start",
              inline: "nearest"
            });
          }
        } else {
          this.button.classList.remove("expanded-button")
          this.hint.style.display = "none"
          this.link.style.display = ""
        }
      }
      
    }
    try {
      customElements.define('hint-button', HintButton)
    } catch (DOMException) { }
  }
  
  defineHintButton()
  
  function ankingsetInnerHTML(elm, html) {
    elm.innerHTML = html;
    Array.from(elm.querySelectorAll("script")).forEach(oldScript => {
      const newScript = document.createElement("script");
      Array.from(oldScript.attributes)
      .forEach(attr => newScript.setAttribute(attr.name, attr.value));
      newScript.appendChild(document.createTextNode(oldScript.innerHTML));
      oldScript.parentNode.replaceChild(newScript, oldScript);
    });
  }
  
</script>